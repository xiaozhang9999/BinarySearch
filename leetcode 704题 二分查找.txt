class Solution {
public:
   /* int search(vector<int>& nums, int target) {
        return SearchR(nums,0,nums.size()-1,target);
    }
    int SearchR(vector<int>& data, int l, int r, int target) {
	if (l > r) return -1;
	int mid = l + (r - l) / 2;
	if (data[mid] == target)
		return mid;
	else if (data[mid] > target)
		return SearchR(data, l, mid - 1, target);
	else
		return SearchR(data, mid + 1, r, target);
}*/
//非递归实现
    int search(vector<int>& nums, int target) {
        //在data[l,r]的范围内查找target
        int l = 0, r = nums.size() - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == target)
                return mid;
            else if (nums[mid] > target)
                r = mid - 1;
            else
                l = mid + 1;
        }
        return -1;
    }
};